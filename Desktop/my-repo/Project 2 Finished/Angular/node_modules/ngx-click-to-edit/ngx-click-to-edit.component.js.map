{"version":3,"sources":["../src/ngx-click-to-edit.component.ts"],"names":[],"mappings":"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","file":"ngx-click-to-edit.component.js","sourceRoot":"","sourcesContent":["import { AfterViewInit, Component, EventEmitter, Input, Output } from '@angular/core';\n\n\nexport class NgxClickToEditComponent implements AfterViewInit {\n     min: number;\n     max: number;\n     field: string              = 'field';\n     unit: string                = '';\n     full: boolean               = false;\n     hideTrigger: boolean = false;\n     type: string                = 'string';\n                  show: boolean                = false;\n                  value: any                   = '';\n\n    \n    set theValue(value: string) {\n        this.value    = value;\n        this.original = this.value;\n    }\n\n    private original: any;\n    \n    private onSave: EventEmitter<any> = new EventEmitter();\n\n    ngAfterViewInit(): void {\n        if (typeof this.value === 'string') {\n            this.type = 'string';\n        }\n        if (typeof this.value === 'number') {\n            this.type = 'number';\n        }\n    }\n\n    makeEditable(field: string): void {\n        if (this.hideTrigger === true) {\n            this.show = true;\n        }\n        if (this.full === false && field === 'trigger') {\n            this.show = true;\n        } else if (this.full === true) {\n            this.show = true;\n        }\n    }\n\n    cancelEditable(): void {\n        this.show  = false;\n        this.value = this.original;\n    }\n\n    onKey(event: KeyboardEvent): void {\n        if (event.key === 'Enter') {\n            this.callSave();\n        }\n        if (event.key === 'Escape') {\n            this.cancelEditable();\n        }\n    }\n\n    callSave(): void {\n        this.onSave.emit({ field: this.field, value: this.value });\n        this.show = false;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'click-to-edit',\n    template: `<div class=\"click-to-edit\">\n    <div class='ndv-comp' [ngClass]=\"{'ndv-active':show}\">\n        <input tabindex=\"-1\" *ngIf='show && type === \"string\"' type='text' [(ngModel)]='value' (keyup)=\"onKey($event)\"/>\n        <input tabindex=\"-1\" *ngIf='show && type === \"number\"' type='number' [min]=\"min\" [max]=\"max\" [(ngModel)]='value'\n               (keyup)=\"onKey($event)\"/>\n\n        <div *ngIf='!show'>\n            <div *ngIf=\"hideTrigger === false\">\n                <div #ref class=\"click-to-edit-content selectable\" (click)='makeEditable(\"trigger\")'><ng-content></ng-content></div>\n                <i class=\"fa fa-pencil selectable\" (click)='makeEditable(\"trigger\")' *ngIf=\"ref.childNodes.length == 0\"></i>\n            </div>\n            <div class=\"click-to-edit-value\" [class.selectable]=\"full === true || hideTrigger === true\"\n                 (click)='makeEditable(\"value\")' [innerHTML]=\"value || 'empty'\"></div>\n            <div class=\"click-to-edit-unit\" [class.selectable]=\"full === true || hideTrigger === true\"\n                 (click)='makeEditable(\"unit\")' *ngIf=\"unit !== ''\" [innerHTML]=\"unit\"></div>\n        </div>\n    </div>\n    <div class='ndv-buttons' *ngIf='show'>\n        <button class='btn-x-sm' (click)='callSave()'><i class=\"fa fa-check\"></i></button>\n        <button class='btn-x-sm' (click)='cancelEditable()'><i class=\"fa fa-times\"></i></button>\n    </div>\n</div>`,\n    styles  : [`.click-to-edit {\n      width: inherit;\n}\n\n.selectable {\n    cursor: pointer;\n}\n\n.ndv-comp {\n    position: relative;\n    overflow: hidden;\n    min-width: 20px;\n    border-radius: 3px;\n    cursor: default;\n}\n\n.fa-pencil {\n    float: left;\n    padding-top: 2px;\n}\n\n.click-to-edit-content {\n    float: left;\n}\n\n.click-to-edit-value {\n    float: left;\n    min-width: 33px;\n    padding: 0 2px 0 8px;\n    text-align: right;\n}\n\n.click-to-edit-unit {\n    float: left;\n}\n\n.active-ndv {\n    background-color: transparent;\n}\ninput {\n    border-radius: 5px;\n    box-shadow: none;\n    min-width: 5px;\n    color: #000;\n}\n.ndv-buttons {\n    background-color: transparent;\n    border-top: none;\n    border-radius: 0 0 3px 3px;\n    box-shadow: 0 3px 6px rgba(111,111,111,0.2);\n    outline: none;\n    padding: 3px;\n    position: absolute;\n    margin-left: 6px;\n    z-index: 1;\n}\n.ndv-comp:hover {\n}\n.ndv-save {\n    margin-right:3px;\n}\n.ndv-active {\n    background-color: transparent;\n}`]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'min': [{ type: Input, args: ['min', ] },],\n'max': [{ type: Input, args: ['max', ] },],\n'field': [{ type: Input, args: ['field', ] },],\n'unit': [{ type: Input, args: ['unit', ] },],\n'full': [{ type: Input, args: ['full', ] },],\n'hideTrigger': [{ type: Input, args: ['hideTrigger', ] },],\n'type': [{ type: Input, args: ['type', ] },],\n'theValue': [{ type: Input, args: ['value', ] },],\n'onSave': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}